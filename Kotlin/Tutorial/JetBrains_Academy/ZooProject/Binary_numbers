# Theory: Binary numbers
이진법은 0과 1을 이용해 숫자들을 나타내는 방법을 말합니다. 이때 쓰인 0과 1은 bit(binary digit)이라고 말합니다. 이 두 개의 숫자를 이용해 모든 숫자를 표현할 수 있습니다. 어떻게 이러한 것이 가능할까요? 

## Decimal vs Binary
 일상에서 우리는 10진법을 사용합니다. 하지만 이러한 숫자들이  1 * Number + 10 * Number + 100 * Number ... 와 같은 숫자로 이루어진 사실은 잘 알지 못합니다. 
 
예를 들어 4251을 한번 살펴봅시다
4 * 10^3 + 2 * 10^2 + 5 * 10^1 + 3 * 10^0
와 같이 나타낼 수 있습니다.

우리는 위와같은 4251의 숫자를 읽을 때에 시작하는 숫자부터 마지막 숫자까지 각각의 자릿수를 곱해 읽게됩니다. 제일 우측은 1 좌측으로 갈 때 마다 * 10 의 자릿수가 결정되비다.

2진법 생태계 역시도 10진법과 같습니다. 유일하게 다른점은 자릿수가 10이 아닌 2인 것입니다. 예를 한번 들어보겠습니다. 2진법으로 이루어진 1011이 있습니다
1 * 2^3 + 0 * 2^2 + 1 * 2^1 + 1 * 2^0
으로 나타낼 수 있습니다.

## Binary counting
10진법은 10개의 숫자(0~9)로 이루어져 있습니다. 10진법으로 쓰여진 숫자를 읽는 것에대는 문제가 없을 것입니다. 하지만 2진법은 조금 생소할 수 있습니다. 그렇다면 아래의 표를 참고해주세요

|10진법|2진법|자릿수 계산|
|:---:|:---:|:------:|
|0|0|0*2^0|
|1|1|1*2^0|
|2|10|1 * 2^1 + 0 * 2^0|
|3|11|1 * 2^1 + 1 * 2^0|
|4|100|1 * 2^2 + 0 * 2^1 + 0 * 2^0|
|5|101|1 * 2^2 + 0 * 2^1 + 1 * 2^0|
|6|110|1 * 2^2 + 1 * 2^1 + 0 * 2^0|
|7|111|1 * 2^2 + 1 * 2^1 + 1 * 2^0|
|8|1000|1 * 2^3 + 0 * 2^2 + 0 * 2^1 + 0 * 2^0|

왜 5가 2진법의 101과 같은지 자릿수를 통해 이해할 수 있습니다.

위의 표에서 볼 수 있듯이 2진법에서는 0 1 10.. 으로 숫자가 커지는 것을 볼 수 있습니다. 2진법에 대해서 이후의 행해지는 연습을 통해 좀 더 명확하게 이해할 수 있을 것입니다.

## Zero padding
어쩌면 당신은 고정된 길이의 2진수를 이용해 어떠한 일을 해야할 수도 있습니다. 이러한 문제를 해결하기 위해서 2진수의 왼쪽에 의미없는 0을 추가함으로써 해결할 수 있씁니다. 예를 들면 11 -> 0011, 101 -> 0101처럼요. 이러한 0의 추가는 숫자에는 아무런 변화도 일으키지 않습니다.

## Why & where
현재 있는 대부분의 전자 기계들은 2진법을 사용합니다. 그 이유는 바로 하드웨어에 있습니다. 기술이 진화하면서 컴퓨터는 2가지의 상태를 가지면서 빠르게 상태를 전환할 수 있는 트랜지스터를 사용하기 때문입니다.

하드웨어가 2진법이라면 컴퓨터 메모리역시도 그렇겠죠? 우리는 메모리에 무엇인가 들어있을떄 아닐때를 맞이하게 됩니다. 만약 들어있다면 이는 8bit의 숫자가 합쳐져 정보를 나타내게 되며 이 8개의 2진수는 byte라고 불립니다. 이러한 바이트는 총 8bit로 256가지의 값을 나타낼수 있기에 우리는 다양한 정보를 저장할 수 있는 것입니다. 이러한 방법을 사용해 저장하는 것을 우리는 binary code라 부르며 이는 다양한 데이터를 저장하는 데에도 사용됩니다. 예를 들어 영어는 ASCII code로 변환되는데 각각의 알파벳은 7개의 bit로 변환됩니다.

색 역시도 마찬가징비니다. RGB라고 불리어지는 변환 방법은 3개의 binary 값으로 각각 이루어져 있으며 이는 빨강 초록 파랑의 값을 나타냅니다. 